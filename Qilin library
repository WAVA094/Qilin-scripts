local UILibrary = {}
UILibrary.__index = UILibrary

-- Конфигурация
local config = {
    primaryColor = Color3.fromRGB(0, 120, 215),
    secondaryColor = Color3.fromRGB(40, 40, 40),
    accentColor = Color3.fromRGB(0, 90, 180),
    textColor = Color3.fromRGB(255, 255, 255),
    borderRadius = UDim.new(0, 8),
    animationSpeed = 0.2
}

-- Вспомогательные функции
local function tween(obj, props, duration, style, callback)
    local tweenInfo = TweenInfo.new(duration or config.animationSpeed, style or Enum.EasingStyle.Quad)
    local tween = game:GetService("TweenService"):Create(obj, tweenInfo, props)
    tween:Play()
    if callback then tween.Completed:Connect(callback) end
    return tween
end

local function createRoundedFrame(name, parent)
    local frame = Instance.new("Frame")
    frame.Name = name or "RoundedFrame"
    frame.BackgroundColor3 = config.secondaryColor
    frame.BackgroundTransparency = 0
    frame.BorderSizePixel = 0
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = config.borderRadius
    corner.Parent = frame
    
    if parent then frame.Parent = parent end
    
    return frame
end

-- Основное окно
function UILibrary:CreateWindow(title)
    local window = {}
    setmetatable(window, self)
    
    -- Основной контейнер
    window.main = createRoundedFrame("Window")
    window.main.Size = UDim2.new(0, 400, 0, 500)
    window.main.Position = UDim2.new(0.5, 0, 0.5, 0)
    window.main.AnchorPoint = Vector2.new(0.5, 0.5)
    window.main.ClipsDescendants = true
    window.main.Parent = game:GetService("CoreGui")
    
    -- Заголовок
    window.titleBar = createRoundedFrame("TitleBar", window.main)
    window.titleBar.Size = UDim2.new(1, 0, 0, 40)
    window.titleBar.Position = UDim2.new(0, 0, 0, 0)
    window.titleBar.BackgroundColor3 = config.primaryColor
    
    local titleText = Instance.new("TextLabel")
    titleText.Name = "Title"
    titleText.Text = title or "UI Window"
    titleText.Font = Enum.Font.GothamSemibold
    titleText.TextColor3 = config.textColor
    titleText.TextSize = 18
    titleText.BackgroundTransparency = 1
    titleText.Size = UDim2.new(1, -20, 1, 0)
    titleText.Position = UDim2.new(0, 10, 0, 0)
    titleText.TextXAlignment = Enum.TextXAlignment.Left
    titleText.Parent = window.titleBar
    
    -- Контент
    window.content = createRoundedFrame("Content", window.main)
    window.content.Size = UDim2.new(1, -10, 1, -50)
    window.content.Position = UDim2.new(0, 5, 0, 45)
    window.content.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
    
    local contentList = Instance.new("UIListLayout")
    contentList.Padding = UDim.new(0, 5)
    contentList.SortOrder = Enum.SortOrder.LayoutOrder
    contentList.Parent = window.content
    
    local contentPadding = Instance.new("UIPadding")
    contentPadding.PaddingTop = UDim.new(0, 5)
    contentPadding.PaddingLeft = UDim.new(0, 5)
    contentPadding.PaddingRight = UDim.new(0, 5)
    contentPadding.PaddingBottom = UDim.new(0, 5)
    contentPadding.Parent = window.content
    
    -- Анимация появления
    window.main.Size = UDim2.new(0, 400, 0, 0)
    tween(window.main, {Size = UDim2.new(0, 400, 0, 500)}, 0.5, Enum.EasingStyle.Back)
    
    -- Функции окна
    function window:Close()
        tween(self.main, {Size = UDim2.new(0, 400, 0, 0)}, 0.3, Enum.EasingStyle.Back, function()
            self.main:Destroy()
        end)
    end
    
    return window
end

-- Кнопка
function UILibrary:CreateButton(text, callback)
    local button = {}
    
    button.frame = createRoundedFrame("Button", self.content)
    button.frame.Size = UDim2.new(1, -10, 0, 40)
    button.frame.BackgroundColor3 = config.primaryColor
    button.frame.LayoutOrder = #self.content:GetChildren()
    
    local buttonText = Instance.new("TextLabel")
    buttonText.Name = "ButtonText"
    buttonText.Text = text or "Button"
    buttonText.Font = Enum.Font.GothamSemibold
    buttonText.TextColor3 = config.textColor
    buttonText.TextSize = 16
    buttonText.BackgroundTransparency = 1
    buttonText.Size = UDim2.new(1, 0, 1, 0)
    buttonText.Position = UDim2.new(0, 0, 0, 0)
    buttonText.Parent = button.frame
    
    -- Анимации кнопки
    button.frame.MouseEnter:Connect(function()
        tween(button.frame, {BackgroundColor3 = config.accentColor}, 0.1)
    end)
    
    button.frame.MouseLeave:Connect(function()
        tween(button.frame, {BackgroundColor3 = config.primaryColor}, 0.2)
    end)
    
    button.frame.MouseButton1Down:Connect(function()
        tween(button.frame, {Size = UDim2.new(0.98, -10, 0, 38)}, 0.1)
    end)
    
    button.frame.MouseButton1Up:Connect(function()
        tween(button.frame, {Size = UDim2.new(1, -10, 0, 40)}, 0.2)
        if callback then callback() end
    end)
    
    return button
end

-- Toggle кнопка
function UILibrary:CreateToggle(text, default, callback)
    local toggle = {}
    toggle.value = default or false
    
    toggle.frame = createRoundedFrame("Toggle", self.content)
    toggle.frame.Size = UDim2.new(1, -10, 0, 40)
    toggle.frame.BackgroundColor3 = config.secondaryColor
    toggle.frame.LayoutOrder = #self.content:GetChildren()
    
    local toggleText = Instance.new("TextLabel")
    toggleText.Name = "ToggleText"
    toggleText.Text = text or "Toggle"
    toggleText.Font = Enum.Font.GothamSemibold
    toggleText.TextColor3 = config.textColor
    toggleText.TextSize = 16
    toggleText.BackgroundTransparency = 1
    toggleText.Size = UDim2.new(0.7, 0, 1, 0)
    toggleText.Position = UDim2.new(0, 10, 0, 0)
    toggleText.TextXAlignment = Enum.TextXAlignment.Left
    toggleText.Parent = toggle.frame
    
    local toggleSwitch = createRoundedFrame("Switch", toggle.frame)
    toggleSwitch.Size = UDim2.new(0, 50, 0, 25)
    toggleSwitch.Position = UDim2.new(1, -60, 0.5, -12.5)
    toggleSwitch.BackgroundColor3 = Color3.fromRGB(80, 80, 80)
    
    local toggleDot = createRoundedFrame("Dot", toggleSwitch)
    toggleDot.Size = UDim2.new(0, 21, 0, 21)
    toggleDot.Position = UDim2.new(0, 2, 0.5, -10.5)
    toggleDot.BackgroundColor3 = Color3.fromRGB(200, 200, 200)
    
    -- Функция обновления состояния
    local function updateState()
        if toggle.value then
            tween(toggleSwitch, {BackgroundColor3 = config.primaryColor}, 0.2)
            tween(toggleDot, {Position = UDim2.new(1, -23, 0.5, -10.5)}, 0.2)
        else
            tween(toggleSwitch, {BackgroundColor3 = Color3.fromRGB(80, 80, 80)}, 0.2)
            tween(toggleDot, {Position = UDim2.new(0, 2, 0.5, -10.5)}, 0.2)
        end
    end
    
    -- Инициализация
    updateState()
    
    -- Обработчики событий
    toggle.frame.MouseEnter:Connect(function()
        tween(toggle.frame, {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}, 0.1)
    end)
    
    toggle.frame.MouseLeave:Connect(function()
        tween(toggle.frame, {BackgroundColor3 = config.secondaryColor}, 0.2)
    end)
    
    toggle.frame.MouseButton1Down:Connect(function()
        tween(toggle.frame, {Size = UDim2.new(0.98, -10, 0, 38)}, 0.1)
    end)
    
    toggle.frame.MouseButton1Up:Connect(function()
        tween(toggle.frame, {Size = UDim2.new(1, -10, 0, 40)}, 0.2)
        toggle.value = not toggle.value
        updateState()
        if callback then callback(toggle.value) end
    end)
    
    return toggle
end

-- Dropdown
function UILibrary:CreateDropdown(text, options, callback)
    local dropdown = {}
    dropdown.open = false
    dropdown.options = options or {}
    dropdown.selected = nil
    
    dropdown.frame = createRoundedFrame("Dropdown", self.content)
    dropdown.frame.Size = UDim2.new(1, -10, 0, 40)
    dropdown.frame.BackgroundColor3 = config.secondaryColor
    dropdown.frame.LayoutOrder = #self.content:GetChildren()
    dropdown.frame.ClipsDescendants = true
    
    local dropdownText = Instance.new("TextLabel")
    dropdownText.Name = "DropdownText"
    dropdownText.Text = text or "Dropdown"
    dropdownText.Font = Enum.Font.GothamSemibold
    dropdownText.TextColor3 = config.textColor
    dropdownText.TextSize = 16
    dropdownText.BackgroundTransparency = 1
    dropdownText.Size = UDim2.new(0.7, 0, 1, 0)
    dropdownText.Position = UDim2.new(0, 10, 0, 0)
    dropdownText.TextXAlignment = Enum.TextXAlignment.Left
    dropdownText.Parent = dropdown.frame
    
    local dropdownArrow = Instance.new("ImageLabel")
    dropdownArrow.Name = "Arrow"
    dropdownArrow.Image = "rbxassetid://6031090990"
    dropdownArrow.Size = UDim2.new(0, 20, 0, 20)
    dropdownArrow.Position = UDim2.new(1, -30, 0.5, -10)
    dropdownArrow.BackgroundTransparency = 1
    dropdownArrow.Parent = dropdown.frame
    
    -- Контейнер для опций
    dropdown.optionsFrame = createRoundedFrame("Options", dropdown.frame)
    dropdown.optionsFrame.Size = UDim2.new(1, 0, 0, 0)
    dropdown.optionsFrame.Position = UDim2.new(0, 0, 0, 40)
    dropdown.optionsFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    dropdown.optionsFrame.Visible = false
    
    local optionsList = Instance.new("UIListLayout")
    optionsList.Padding = UDim.new(0, 2)
    optionsList.SortOrder = Enum.SortOrder.LayoutOrder
    optionsList.Parent = dropdown.optionsFrame
    
    local optionsPadding = Instance.new("UIPadding")
    optionsPadding.PaddingTop = UDim.new(0, 5)
    optionsPadding.PaddingLeft = UDim.new(0, 5)
    optionsPadding.PaddingRight = UDim.new(0, 5)
    optionsPadding.PaddingBottom = UDim.new(0, 5)
    optionsPadding.Parent = dropdown.optionsFrame
    
    -- Функция обновления опций
    local function updateOptions()
        for _, option in pairs(dropdown.optionsFrame:GetChildren()) do
            if option:IsA("Frame") then option:Destroy() end
        end
        
        for i, option in ipairs(dropdown.options) do
            local optionFrame = createRoundedFrame("Option", dropdown.optionsFrame)
            optionFrame.Size = UDim2.new(1, -10, 0, 30)
            optionFrame.BackgroundColor3 = Color3.fromRGB(50, 50, 50)
            optionFrame.LayoutOrder = i
            
            local optionText = Instance.new("TextLabel")
            optionText.Text = option
            optionText.Font = Enum.Font.Gotham
            optionText.TextColor3 = config.textColor
            optionText.TextSize = 14
            optionText.BackgroundTransparency = 1
            optionText.Size = UDim2.new(1, -10, 1, 0)
            optionText.Position = UDim2.new(0, 10, 0, 0)
            optionText.TextXAlignment = Enum.TextXAlignment.Left
            optionText.Parent = optionFrame
            
            optionFrame.MouseEnter:Connect(function()
                tween(optionFrame, {BackgroundColor3 = Color3.fromRGB(70, 70, 70)}, 0.1)
            end)
            
            optionFrame.MouseLeave:Connect(function()
                tween(optionFrame, {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}, 0.2)
            end)
            
            optionFrame.MouseButton1Down:Connect(function()
                tween(optionFrame, {BackgroundColor3 = config.primaryColor}, 0.1)
            end)
            
            optionFrame.MouseButton1Up:Connect(function()
                dropdown.selected = option
                dropdownText.Text = text..": "..option
                dropdown:Toggle()
                if callback then callback(option) end
            end)
        end
    end
    
    -- Функция переключения состояния
    function dropdown:Toggle()
        self.open = not self.open
        
        if self.open then
            self.optionsFrame.Visible = true
            local height = math.min(#self.options * 32 + 10, 200)
            tween(self.frame, {Size = UDim2.new(1, -10, 0, 40 + height)}, 0.2)
            tween(self.optionsFrame, {Size = UDim2.new(1, 0, 0, height)}, 0.2)
            tween(dropdownArrow, {Rotation = 180}, 0.2)
        else
            tween(self.frame, {Size = UDim2.new(1, -10, 0, 40)}, 0.2)
            tween(self.optionsFrame, {Size = UDim2.new(1, 0, 0, 0)}, 0.2, nil, function()
                if not self.open then self.optionsFrame.Visible = false end
            end)
            tween(dropdownArrow, {Rotation = 0}, 0.2)
        end
    end
    
    -- Инициализация
    updateOptions()
    
    -- Обработчики событий
    dropdown.frame.MouseEnter:Connect(function()
        tween(dropdown.frame, {BackgroundColor3 = Color3.fromRGB(50, 50, 50)}, 0.1)
    end)
    
    dropdown.frame.MouseLeave:Connect(function()
        tween(dropdown.frame, {BackgroundColor3 = config.secondaryColor}, 0.2)
    end)
    
    dropdown.frame.MouseButton1Down:Connect(function()
        tween(dropdown.frame, {Size = UDim2.new(0.98, -10, 0, 38)}, 0.1)
    end)
    
    dropdown.frame.MouseButton1Up:Connect(function()
        tween(dropdown.frame, {Size = UDim2.new(1, -10, 0, 40)}, 0.2)
        dropdown:Toggle()
    end)
    
    return dropdown
end

-- Slider
function UILibrary:CreateSlider(text, min, max, default, callback)
    local slider = {}
    slider.min = min or 0
    slider.max = max or 100
    slider.value = default or min
    slider.dragging = false
    
    slider.frame = createRoundedFrame("Slider", self.content)
    slider.frame.Size = UDim2.new(1, -10, 0, 60)
    slider.frame.BackgroundColor3 = config.secondaryColor
    slider.frame.LayoutOrder = #self.content:GetChildren()
    
    local sliderText = Instance.new("TextLabel")
    sliderText.Name = "SliderText"
    sliderText.Text = text or "Slider"
    sliderText.Font = Enum.Font.GothamSemibold
    sliderText.TextColor3 = config.textColor
    sliderText.TextSize = 16
    sliderText.BackgroundTransparency = 1
    sliderText.Size = UDim2.new(1, -20, 0, 20)
    sliderText.Position = UDim2.new(0, 10, 0, 5)
    sliderText.TextXAlignment = Enum.TextXAlignment.Left
    sliderText.Parent = slider.frame
    
    local sliderValue = Instance.new("TextLabel")
    sliderValue.Name = "SliderValue"
    sliderValue.Text = tostring(slider.value)
    sliderValue.Font = Enum.Font.Gotham
    sliderValue.TextColor3 = config.textColor
    sliderValue.TextSize = 14
    sliderValue.BackgroundTransparency = 1
    sliderValue.Size = UDim2.new(0, 50, 0, 20)
    sliderValue.Position = UDim2.new(1, -60, 0, 5)
    sliderValue.TextXAlignment = Enum.TextXAlignment.Right
    sliderValue.Parent = slider.frame
    
    local sliderTrack = createRoundedFrame("Track", slider.frame)
    sliderTrack.Size = UDim2.new(1, -20, 0, 10)
    sliderTrack.Position = UDim2.new(0, 10, 0, 35)
    sliderTrack.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
    
    local sliderFill = createRoundedFrame("Fill", sliderTrack)
    sliderFill.Size = UDim2.new((slider.value - slider.min) / (slider.max - slider.min), 0, 1, 0)
    sliderFill.BackgroundColor3 = config.primaryColor
    
    local sliderDot = createRoundedFrame("Dot", sliderTrack)
    sliderDot.Size = UDim2.new(0, 16, 0, 16)
    sliderDot.Position = UDim2.new(sliderFill.Size.X.Scale, -8, 0.5, -8)
    sliderDot.BackgroundColor3 = Color3.fromRGB(220, 220, 220)
    sliderDot.ZIndex = 2
    
    -- Функция обновления значения
    local function updateValue(newValue)
        newValue = math.clamp(newValue, slider.min, slider.max)
        slider.value = newValue
        sliderValue.Text = tostring(math.floor(newValue))
        
        local percent = (newValue - slider.min) / (slider.max - slider.min)
        tween(sliderFill, {Size = UDim2.new(percent, 0, 1, 0)}, 0.1)
        tween(sliderDot, {Position = UDim2.new(percent, -8, 0.5, -8)}, 0.1)
        
        if callback then callback(newValue) end
    end
    
    -- Обработчики событий
    sliderDot.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            slider.dragging = true
            tween(sliderDot, {Size = UDim2.new(0, 20, 0, 20)}, 0.1)
        end
    end)
    
    sliderDot.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            slider.dragging = false
            tween(sliderDot, {Size = UDim2.new(0, 16, 0, 16)}, 0.2)
        end
    end)
    
    game:GetService("UserInputService").InputChanged:Connect(function(input)
        if slider.dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
            local mousePos = input.Position.X
            local absolutePos = sliderTrack.AbsolutePosition.X
            local absoluteSize = sliderTrack.AbsoluteSize.X
            
            local relativePos = math.clamp(mousePos - absolutePos, 0, absoluteSize)
            local percent = relativePos / absoluteSize
            local newValue = slider.min + (slider.max - slider.min) * percent
            
            updateValue(newValue)
        end
    end)
    
    sliderTrack.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            local mousePos = input.Position.X
            local absolutePos = sliderTrack.AbsolutePosition.X
            local absoluteSize = sliderTrack.AbsoluteSize.X
            
            local relativePos = math.clamp(mousePos - absolutePos, 0, absoluteSize)
            local percent = relativePos / absoluteSize
            local newValue = slider.min + (slider.max - slider.min) * percent
            
            updateValue(newValue)
        end
    end)
    
    return slider
end

-- Tab система
function UILibrary:CreateTabSystem()
    local tabSystem = {}
    
    tabSystem.frame = createRoundedFrame("TabSystem", self.content)
    tabSystem.frame.Size = UDim2.new(1, -10, 0, 40)
    tabSystem.frame.BackgroundColor3 = config.secondaryColor
    tabSystem.frame.LayoutOrder = #self.content:GetChildren()
    
    tabSystem.tabs = {}
    tabSystem.currentTab = nil
    
    local tabButtons = createRoundedFrame("TabButtons", tabSystem.frame)
    tabButtons.Size = UDim2.new(1, 0, 0, 40)
    tabButtons.BackgroundTransparency = 1
    
    local tabList = Instance.new("UIListLayout")
    tabList.FillDirection = Enum.FillDirection.Horizontal
    tabList.Padding = UDim.new(0, 5)
    tabList.Parent = tabButtons
    
    local tabPadding = Instance.new("UIPadding")
    tabPadding.PaddingLeft = UDim.new(0, 5)
    tabPadding.PaddingRight = UDim.new(0, 5)
    tabPadding.Parent = tabButtons
    
    tabSystem.content = createRoundedFrame("TabContent", tabSystem.frame)
    tabSystem.content.Size = UDim2.new(1, 0, 1, -45)
    tabSystem.content.Position = UDim2.new(0, 0, 0, 45)
    tabSystem.content.BackgroundColor3 = Color3.fromRGB(40, 40, 40)
    tabSystem.content.Visible = false
    
    local contentList = Instance.new("UIListLayout")
    contentList.Padding = UDim.new(0, 5)
    contentList.SortOrder = Enum.SortOrder.LayoutOrder
    contentList.Parent = tabSystem.content
    
    local contentPadding = Instance.new("UIPadding")
    contentPadding.PaddingTop = UDim.new(0, 5)
    contentPadding.PaddingLeft = UDim.new(0, 5)
    contentPadding.PaddingRight = UDim.new(0, 5)
    contentPadding.PaddingBottom = UDim.new(0, 5)
    contentPadding.Parent = tabSystem.content
    
    -- Функция добавления вкладки
    function tabSystem:AddTab(name)
        local tab = {}
        
        tab.button = createRoundedFrame("TabButton_"..name, tabButtons)
        tab.button.Size = UDim2.new(0, 80, 0, 30)
        tab.button.BackgroundColor3 = Color3.fromRGB(60, 60, 60)
        
        local buttonText = Instance.new("TextLabel")
        buttonText.Name = "Text"
        buttonText.Text = name
        buttonText.Font = Enum.Font.GothamSemibold
        buttonText.TextColor3 = config.textColor
        buttonText.TextSize = 14
        buttonText.BackgroundTransparency = 1
        buttonText.Size = UDim2.new(1, 0, 1, 0)
        buttonText.Parent = tab.button
        
        tab.content = createRoundedFrame("TabContent_"..name, tabSystem.content)
        tab.content.Size = UDim2.new(1, 0, 1, 0)
        tab.content.BackgroundTransparency = 1
        tab.content.Visible = false
        
        -- Обработчики событий
        tab.button.MouseEnter:Connect(function()
            if tabSystem.currentTab ~= tab then
                tween(tab.button, {BackgroundColor3 = Color3.fromRGB(80, 80, 80)}, 0.1)
            end
        end)
        
        tab.button.MouseLeave:Connect(function()
            if tabSystem.currentTab ~= tab then
                tween(tab.button, {BackgroundColor3 = Color3.fromRGB(60, 60, 60)}, 0.2)
            end
        end)
        
        tab.button.MouseButton1Down:Connect(function()
            if tabSystem.currentTab ~= tab then
                tween(tab.button, {Size = UDim2.new(0, 78, 0, 28)}, 0.1)
            end
        end)
        
        tab.button.MouseButton1Up:Connect(function()
            if tabSystem.currentTab ~= tab then
                tween(tab.button, {Size = UDim2.new(0, 80, 0, 30)}, 0.2)
                tabSystem:SelectTab(tab)
            end
        end)
        
        -- Функции вкладки
        function tab:CreateButton(text, callback)
            local button = {}
            
            button.frame = createRoundedFrame("Button", tab.content)
            button.frame.Size = UDim2.new(1, -10, 0, 40)
            button.frame.BackgroundColor3 = config.primaryColor
            button.frame.LayoutOrder = #tab.content:GetChildren()
            
            local buttonText = Instance.new("TextLabel")
            buttonText.Name = "ButtonText"
            buttonText.Text = text or "Button"
            buttonText.Font = Enum.Font.GothamSemibold
            buttonText.TextColor3 = config.textColor
            buttonText.TextSize = 16
            buttonText.BackgroundTransparency = 1
            buttonText.Size = UDim2.new(1, 0, 1, 0)
            buttonText.Position = UDim2.new(0, 0, 0, 0)
            buttonText.Parent = button.frame
            
            -- Анимации кнопки
            button.frame.MouseEnter:Connect(function()
                tween(button.frame, {BackgroundColor3 = config.accentColor}, 0.1)
            end)
            
            button.frame.MouseLeave:Connect(function()
                tween(button.frame, {BackgroundColor3 = config.primaryColor}, 0.2)
            end)
            
            button.frame.MouseButton1Down:Connect(function()
                tween(button.frame, {Size = UDim2.new(0.98, -10, 0, 38)}, 0.1)
            end)
            
            button.frame.MouseButton1Up:Connect(function()
                tween(button.frame, {Size = UDim2.new(1, -10, 0, 40)}, 0.2)
                if callback then callback() end
            end)
            
            return button
        end
        
        table.insert(self.tabs, tab)
        
        -- Автоматически выбираем первую вкладку
        if #self.tabs == 1 then
            self:SelectTab(tab)
        end
        
        return tab
    end
    
    -- Функция выбора вкладки
    function tabSystem:SelectTab(tab)
        if self.currentTab then
            tween(self.currentTab.button, {BackgroundColor3 = Color3.fromRGB(60, 60, 60)}, 0.2)
            self.currentTab.content.Visible = false
        end
        
        self.currentTab = tab
        tween(tab.button, {BackgroundColor3 = config.primaryColor}, 0.2)
        tab.content.Visible = true
        self.content.Visible = true
        
        -- Анимация появления контента
        tab.content.BackgroundTransparency = 1
        tween(tab.content, {BackgroundTransparency = 0}, 0.3)
    end
    
    return tabSystem
end

return UILibrary
